#include <FlexiTimer2.h>
#include <avr/io.h>



#define PWMOut 10
#define SyncIn 3
#define WaveformIn 3
#define AmpIn 0
#define PhaseIn 1
#define ModIn 5

unsigned int frq = 60000; // PWM周波数。60kHzあたりまで機能するが、マージンとって50kHzとする。
float duty = 0.5; // duty比率
int count = 0;

byte mode = 1;//
//0=saw1
//1=saw2
//2=sine
//3=tri
//4=squ
//5=random
//6=steady

int set_freq = 1;//
int freq_max = 30;//外部クロック周期(*100usec)
int amp = 1;//change pwm duty
float amp_rate = 1.0;
int phase = 1;
int mod = 0;//self modulation

bool ext_injudge = 0;//0=use internal clock , 1 = use external clock
bool ext_pulse = 0;//0=no external in
bool old_ext_pulse = 0;
long ext_count = 0;
long ext_count_result = 0;
long old_ext_count_result = 0;
long ext_period = 0;
bool reset_count = 0;

//wave table
const static word saw1[1000] PROGMEM = {
 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,  101,  102,  103,  104,  105,  106,  107,  108,  109,  110,  111,  112,  113,  114,  115,  116,  117,  118,  119,  120,  121,  122,  123,  124,  125,  126,  127,  128,  129,  130,  131,  132,  133,  134,  135,  136,  137,  138,  139,  140,  141,  142,  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,  153,  154,  155,  156,  157,  158,  159,  160,  161,  162,  163,  164,  165,  166,  167,  168,  169,  170,  171,  172,  173,  174,  175,  176,  177,  178,  179,  180,  181,  182,  183,  184,  185,  186,  187,  188,  189,  190,  191,  192,  193,  194,  195,  196,  197,  198,  199,  200,  201,  202,  203,  204,  205,  206,  207,  208,  209,  210,  211,  212,  213,  214,  215,  216,  217,  218,  219,  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,  230,  231,  232,  233,  234,  235,  236,  237,  238,  239,  240,  241,  242,  243,  244,  245,  246,  247,  248,  249,  250,  251,  252,  253,  254,  255,  256,  257,  258,  259,  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,  271,  272,  273,  274,  275,  276,  277,  278,  279,  280,  281,  282,  283,  284,  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,  296,  297,  298,  299,  300,  301,  302,  303,  304,  305,  306,  307,  308,  309,  310,  311,  312,  313,  314,  315,  316,  317,  318,  319,  320,  321,  322,  323,  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,  334,  335,  336,  337,  338,  339,  340,  341,  342,  343,  344,  345,  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,  357,  358,  359,  360,  361,  362,  363,  364,  365,  366,  367,  368,  369,  370,  371,  372,  373,  374,  375,  376,  377,  378,  379,  380,  381,  382,  383,  384,  385,  386,  387,  388,  389,  390,  391,  392,  393,  394,  395,  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,  418,  419,  420,  421,  422,  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,  433,  434,  435,  436,  437,  438,  439,  440,  441,  442,  443,  444,  445,  446,  447,  448,  449,  450,  451,  452,  453,  454,  455,  456,  457,  458,  459,  460,  461,  462,  463,  464,  465,  466,  467,  468,  469,  470,  471,  472,  473,  474,  475,  476,  477,  478,  479,  480,  481,  482,  483,  484,  485,  486,  487,  488,  489,  490,  491,  492,  493,  494,  495,  496,  497,  498,  499,  500,  501,  502,  503,  504,  505,  506,  507,  508,  509,  510,  511,  512,  513,  514,  515,  516,  517,  518,  519,  520,  521,  522,  523,  524,  525,  526,  527,  528,  529,  530,  531,  532,  533,  534,  535,  536,  537,  538,  539,  540,  541,  542,  543,  544,  545,  546,  547,  548,  549,  550,  551,  552,  553,  554,  555,  556,  557,  558,  559,  560,  561,  562,  563,  564,  565,  566,  567,  568,  569,  570,  571,  572,  573,  574,  575,  576,  577,  578,  579,  580,  581,  582,  583,  584,  585,  586,  587,  588,  589,  590,  591,  592,  593,  594,  595,  596,  597,  598,  599,  600,  601,  602,  603,  604,  605,  606,  607,  608,  609,  610,  611,  612,  613,  614,  615,  616,  617,  618,  619,  620,  621,  622,  623,  624,  625,  626,  627,  628,  629,  630,  631,  632,  633,  634,  635,  636,  637,  638,  639,  640,  641,  642,  643,  644,  645,  646,  647,  648,  649,  650,  651,  652,  653,  654,  655,  656,  657,  658,  659,  660,  661,  662,  663,  664,  665,  666,  667,  668,  669,  670,  671,  672,  673,  674,  675,  676,  677,  678,  679,  680,  681,  682,  683,  684,  685,  686,  687,  688,  689,  690,  691,  692,  693,  694,  695,  696,  697,  698,  699,  700,  701,  702,  703,  704,  705,  706,  707,  708,  709,  710,  711,  712,  713,  714,  715,  716,  717,  718,  719,  720,  721,  722,  723,  724,  725,  726,  727,  728,  729,  730,  731,  732,  733,  734,  735,  736,  737,  738,  739,  740,  741,  742,  743,  744,  745,  746,  747,  748,  749,  750,  751,  752,  753,  754,  755,  756,  757,  758,  759,  760,  761,  762,  763,  764,  765,  766,  767,  768,  769,  770,  771,  772,  773,  774,  775,  776,  777,  778,  779,  780,  781,  782,  783,  784,  785,  786,  787,  788,  789,  790,  791,  792,  793,  794,  795,  796,  797,  798,  799,  800,  801,  802,  803,  804,  805,  806,  807,  808,  809,  810,  811,  812,  813,  814,  815,  816,  817,  818,  819,  820,  821,  822,  823,  824,  825,  826,  827,  828,  829,  830,  831,  832,  833,  834,  835,  836,  837,  838,  839,  840,  841,  842,  843,  844,  845,  846,  847,  848,  849,  850,  851,  852,  853,  854,  855,  856,  857,  858,  859,  860,  861,  862,  863,  864,  865,  866,  867,  868,  869,  870,  871,  872,  873,  874,  875,  876,  877,  878,  879,  880,  881,  882,  883,  884,  885,  886,  887,  888,  889,  890,  891,  892,  893,  894,  895,  896,  897,  898,  899,  900,  901,  902,  903,  904,  905,  906,  907,  908,  909,  910,  911,  912,  913,  914,  915,  916,  917,  918,  919,  920,  921,  922,  923,  924,  925,  926,  927,  928,  929,  930,  931,  932,  933,  934,  935,  936,  937,  938,  939,  940,  941,  942,  943,  944,  945,  946,  947,  948,  949,  950,  951,  952,  953,  954,  955,  956,  957,  958,  959,  960,  961,  962,  963,  964,  965,  966,  967,  968,  969,  970,  971,  972,  973,  974,  975,  976,  977,  978,  979,  980,  981,  982,  983,  984,  985,  986,  987,  988,  989,  990,  991,  992,  993,  994,  995,  996,  997,  998,  999
};
const static word saw2[1000] PROGMEM = {

};
const static word sine[1000] PROGMEM = {
 500,  500,  500,  500,  510,  510,  510,  520,  520,  520,  530,  530,  530,  540,  540,  540,  550,  550,  550,  550,  560,  560,  560,  570,  570,  570,  580,  580,  580,  590,  590,  590,  590,  600,  600,  600,  610,  610,  610,  620,  620,  620,  630,  630,  630,  630,  640,  640,  640,  650,  650,  650,  660,  660,  660,  660,  670,  670,  670,  680,  680,  680,  680,  690,  690,  690,  700,  700,  700,  710,  710,  710,  710,  720,  720,  720,  720,  730,  730,  730,  740,  740,  740,  740,  750,  750,  750,  750,  760,  760,  760,  770,  770,  770,  770,  780,  780,  780,  780,  790,  790,  790,  790,  800,  800,  800,  800,  810,  810,  810,  810,  820,  820,  820,  820,  830,  830,  830,  830,  830,  840,  840,  840,  840,  850,  850,  850,  850,  860,  860,  860,  860,  860,  870,  870,  870,  870,  870,  880,  880,  880,  880,  880,  890,  890,  890,  890,  890,  900,  900,  900,  900,  900,  900,  910,  910,  910,  910,  910,  920,  920,  920,  920,  920,  920,  930,  930,  930,  930,  930,  930,  930,  940,  940,  940,  940,  940,  940,  940,  950,  950,  950,  950,  950,  950,  950,  960,  960,  960,  960,  960,  960,  960,  960,  960,  970,  970,  970,  970,  970,  970,  970,  970,  970,  970,  980,  980,  980,  980,  980,  980,  980,  980,  980,  980,  980,  980,  980,  980,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  1000, 990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  990,  980,  980,  980,  980,  980,  980,  980,  980,  980,  980,  980,  980,  980,  980,  970,  970,  970,  970,  970,  970,  970,  970,  970,  970,  960,  960,  960,  960,  960,  960,  960,  960,  960,  950,  950,  950,  950,  950,  950,  950,  940,  940,  940,  940,  940,  940,  940,  930,  930,  930,  930,  930,  930,  930,  920,  920,  920,  920,  920,  920,  910,  910,  910,  910,  910,  900,  900,  900,  900,  900,  900,  890,  890,  890,  890,  890,  880,  880,  880,  880,  880,  870,  870,  870,  870,  870,  860,  860,  860,  860,  860,  850,  850,  850,  850,  840,  840,  840,  840,  830,  830,  830,  830,  830,  820,  820,  820,  820,  810,  810,  810,  810,  800,  800,  800,  800,  790,  790,  790,  790,  780,  780,  780,  780,  770,  770,  770,  770,  760,  760,  760,  750,  750,  750,  750,  740,  740,  740,  740,  730,  730,  730,  720,  720,  720,  720,  710,  710,  710,  710,  700,  700,  700,  690,  690,  690,  680,  680,  680,  680,  670,  670,  670,  660,  660,  660,  660,  650,  650,  650,  640,  640,  640,  630,  630,  630,  630,  620,  620,  620,  610,  610,  610,  600,  600,  600,  590,  590,  590,  590,  580,  580,  580,  570,  570,  570,  560,  560,  560,  550,  550,  550,  550,  540,  540,  540,  530,  530,  530,  520,  520,  520,  510,  510,  510,  500,  500,  500,  500,  490,  490,  490,  480,  480,  480,  470,  470,  470,  460,  460,  460,  450,  450,  450,  440,  440,  440,  440,  430,  430,  430,  420,  420,  420,  410,  410,  410,  400,  400,  400,  400,  390,  390,  390,  380,  380,  380,  370,  370,  370,  360,  360,  360,  360,  350,  350,  350,  340,  340,  340,  330,  330,  330,  330,  320,  320,  320,  310,  310,  310,  310,  300,  300,  300,  290,  290,  290,  280,  280,  280,  280,  270,  270,  270,  270,  260,  260,  260,  250,  250,  250,  250,  240,  240,  240,  240,  230,  230,  230,  220,  220,  220,  220,  210,  210,  210,  210,  200,  200,  200,  200,  190,  190,  190,  190,  180,  180,  180,  180,  170,  170,  170,  170,  160,  160,  160,  160,  160,  150,  150,  150,  150,  140,  140,  140,  140,  130,  130,  130,  130,  130,  120,  120,  120,  120,  120,  110,  110,  110,  110,  110,  100,  100,  100,  100,  100,  90, 90, 90, 90, 90, 90, 80, 80, 80, 80, 80, 70, 70, 70, 70, 70, 70, 60, 60, 60, 60, 60, 60, 60, 50, 50, 50, 50, 50, 50, 50, 40, 40, 40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 30, 30, 30, 30, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 30, 30, 30, 30, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 50, 50, 50, 50, 50, 50, 50, 60, 60, 60, 60, 60, 60, 60, 70, 70, 70, 70, 70, 70, 80, 80, 80, 80, 80, 90, 90, 90, 90, 90, 90, 100,  100,  100,  100,  100,  110,  110,  110,  110,  110,  120,  120,  120,  120,  120,  130,  130,  130,  130,  130,  140,  140,  140,  140,  150,  150,  150,  150,  160,  160,  160,  160,  160,  170,  170,  170,  170,  180,  180,  180,  180,  190,  190,  190,  190,  200,  200,  200,  200,  210,  210,  210,  210,  220,  220,  220,  220,  230,  230,  230,  240,  240,  240,  240,  250,  250,  250,  250,  260,  260,  260,  270,  270,  270,  270,  280,  280,  280,  280,  290,  290,  290,  300,  300,  300,  310,  310,  310,  310,  320,  320,  320,  330,  330,  330,  330,  340,  340,  340,  350,  350,  350,  360,  360,  360,  360,  370,  370,  370,  380,  380,  380,  390,  390,  390,  400,  400,  400,  400,  410,  410,  410,  420,  420,  420,  430,  430,  430,  440,  440,  440,  440,  450,  450,  450,  460,  460,  460,  470,  470,  470,  480,  480,  480,  490,  490,  490
};
const static word tri[1000] PROGMEM = {

};
const static word squ[1000] PROGMEM = {

};


void setup() {
 pinMode(PWMOut, OUTPUT);
 pinMode(SyncIn, INPUT);

 FlexiTimer2::set(5, 1.0 / 100000, timer_count); // 50usec/count
 FlexiTimer2::start();

 //for development
//  Serial.begin(9600);

}

void loop() {
 old_ext_pulse = ext_pulse;
 ext_pulse = digitalRead(SyncIn);

 //------------wave select-------------------------------
 int WF = analogRead(WaveformIn);
 if (WF < 31) {
   mode = 6;//steady
 }
 else if (WF >= 31 && WF < 155) {
   mode = 0;//saw1
 }
 else if (WF >= 155 && WF < 352) {
   mode = 1;//saw2
 }
 else if (WF >= 352 && WF < 571) {
   mode = 2;//sin
 }
 else if (WF >= 571 && WF < 771) {
   mode = 3;//tri
 }
 else if (WF >= 771 && WF < 939) {
   mode = 4;//squ
 }
 else if (WF >= 939) {
   mode = 5;//random
 }


 //------------phase and internal clock set-------------------------------
 if (ext_injudge == 0) { //use internal clock , phase function off
   phase = 0;
   //    freq_max = 1+(analogRead(1))/5;
   int PH = analogRead(PhaseIn);
   freq_max = 1 + 0.0007 * PH * PH;
 }

 else if (ext_injudge == 1) { //use external clock , phase function on
   int PH = analogRead(PhaseIn);
   phase = map(PH, 0, 1023, 0, 999);
 }


 //------------selc modulation-------------------------------
 int MD = analogRead(ModIn);
 if (MD < 31) {
   mod = 0;//no modulation
 }
 else if (MD >= 31 && MD < 155) {
   mod = 1;//saw1
 }
 else if (MD >= 155 && MD < 352) {
   mod = 2;//saw2
 }
 else if (MD >= 352 && MD < 571) {
   mod = 3;//sin
 }
 else if (MD >= 571 && MD < 771) {
   mod = 4;//tri
 }
 else if (MD >= 771 && MD < 939) {
   mod = 5;//squ
 }
 else if (MD >= 939) {
   mod = 6;//random
 }

 switch (mod) {
   case 0:
     break;

   case 1:
     phase = phase + (pgm_read_word(&(saw1[count])));
     break;

   case 2:
     phase = phase + (pgm_read_word(&(saw2[count])));
     break;

   case 3:
     phase = phase + (pgm_read_word(&(sine[count])));
     break;

   case 4:
     phase = phase + (pgm_read_word(&(tri[count])));
     break;

   case 5:
     phase = phase + (pgm_read_word(&(squ[count])));
     break;

   case 6:
     phase = phase + (pgm_read_word(&(saw1[random(1, 1000)])));
     break;
 }

 //--------------amp set----------------
 amp = analogRead(AmpIn);
 amp = map(amp, 0, 1023, 1, 100);
 amp_rate = (float)amp / 100;


 //------------external in judge-------------------------------
 if ( ext_count > 160000 ) { //no external signal during 8 sec
   ext_injudge = 0;
 }
 else  {
   ext_injudge = 1;
 }


 //----------clock setting-------------

 if (ext_pulse == 1 && old_ext_pulse == 0) {
   old_ext_count_result = ext_count_result;//twice pulse average
   ext_count_result = ext_count;
   ext_period = (old_ext_count_result + ext_count_result) / 1960;
   freq_max = ext_period;
 }

 if ( old_ext_pulse == 0 && ext_pulse == 1  ) { //外部入力が有→無のとき
   ext_count = 0;
   count = 0;

 }
 // モード指定
 TCCR1A = 0b00100001;
 TCCR1B = 0b00100001;//分周比1

 // TOP値指定
 //OCR1A = (unsigned int)(16000000 / frq);

 // Duty比指定
 OCR1B = (unsigned int)(16000000  / frq * duty * amp_rate);

 // for development
 //  Serial.print(ext_injudge);
 //  Serial.print(",");
 //  Serial.print(analogRead(5));
 //  Serial.println("");
}

void timer_count() {

 ext_count ++;
 set_freq ++;
 
 if (set_freq >= freq_max) {
   set_freq = 0;

   count ++;
   if (count + phase >= 1000 && mode != 5) {
     count = count - 1000;
   }

   switch (mode) {
     case 0:
       duty = (float)(pgm_read_word(&(saw1[count + phase]))) / 1000;
       break;

     case 1:
       duty = (float)(pgm_read_word(&(saw2[count + phase]))) / 1000;
       break;

     case 2:
       duty = (float)(pgm_read_word(&(sine[count + phase]))) / 1000;
       break;

     case 3:
       duty = (float)(pgm_read_word(&(tri[count + phase]))) / 1000;
       break;

     case 4:
       duty = (float)(pgm_read_word(&(squ[count + phase]))) / 1000;
       break;
   }

   //random
   if (mode == 5) {
     count ++;
     if (count >= 250) {
       count = 0;
       duty = random(1, 1000);
       duty = duty / 1000;
     }
   }

   //steady
   if (mode == 6) {
     duty = 1;
   }
 }
 //analogWrite(PWMOut, (int)(duty*256));
}
